# -*- coding: utf-8 -*-
"""MCB Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZnKfa8zXxvnu6GTN-PJoe1N0B62CTp8I

#Mercedes Benz: Speed Recommendation Project by Mthobisi Latha
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import RandomOverSampler
from sklearn.preprocessing import LabelEncoder
import glob

"""*Dataset:*

Road Accidents due to Driver Violations(India)

Investigating Non-Adherence to Traffic Laws

By shri hkh [source]
https://www.kaggle.com/datasets/thedevastator/state-ut-wise-road-accidents-due-to-driver-viola

"""

dataset_cols = ["stateut","region","regionID","alcintake", "overspeed", "signalvoid", "wrongside", "lanejumping", "overtaking", "asleep", "othercauses"]
df = pd.read_csv("driverresponse.csv").drop(["index", "sno", "alcintake2014" ,	"overspeed2014",	"overtaking2014",	"lanejumping2014" ,	"wrongside2014",	"asleep2014" 	,"othercause2014", "signalavoid2014"], axis=1)

df.columns = dataset_cols

df.head()

for label in df.select_dtypes(include='number').columns:
    plt.hist(df[label], color='blue', label='accidents', alpha=0.7, density=True)
    plt.title(label)
    plt.xlabel("Value")
    plt.ylabel("Probability")
    plt.show()

"""#Train, Validation and Test Datasets

"""

train, valid, test = np.split(df.sample(frac=1), [int(0.6*len(df)), int(0.8*len(df))])

def scale_dataset(dataframe, oversample = False):
  X = dataframe[dataframe.columns[:-1]].values
  y = dataframe[dataframe.columns[-1]].values

  scaler = StandardScaler()
  X = scaler.fit_transform(X)

  if oversample:
    ros = RandomOverSampler()
    X, y = ros.fit_resample(X, y)


  data = np.hstack((X, np.reshape(y, (-1, 1))))

  return data, X, y

label_encoder = LabelEncoder()
train['stateut'] = label_encoder.fit_transform(train['stateut'])
train['region'] = label_encoder.fit_transform(train['region'])

valid['stateut'] = label_encoder.fit_transform(valid['stateut'])
valid['region'] = label_encoder.fit_transform(valid['region'])

test['stateut'] = label_encoder.fit_transform(test['stateut'])
test['region'] = label_encoder.fit_transform(test['region'])

train, X_train, y_train = scale_dataset(train, oversample=True)
valid, X_valid, y_valid = scale_dataset(valid, oversample=False)
test, X_test, y_test = scale_dataset(test, oversample=False)

"""#k-Nearest Neighbour

"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.impute import SimpleImputer
from sklearn.metrics import classification_report
from sklearn.preprocessing import StandardScaler

# Handle missing values if needed
imputer = SimpleImputer(strategy='mean')
X_train_imputed = imputer.fit_transform(X_train)
X_test_imputed = imputer.transform(X_test)

# Standardize features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train_imputed)
X_test_scaled = scaler.transform(X_test_imputed)

# Convert the NumPy array to a Pandas DataFrame with appropriate column names
X_train_imputed_df = pd.DataFrame(X_train_imputed, columns=[f'feature_{i}' for i in range(X_train_imputed.shape[1])])

# Create and fit the KNeighborsClassifier
knn_model = KNeighborsClassifier(n_neighbors=1)
knn_model.fit(X_train_imputed, y_train)

y_pred = knn_model.predict(X_test_scaled)

print(classification_report(y_test, y_pred, zero_division=1))

"""#Naive Bayes"""

from sklearn.naive_bayes import GaussianNB

from sklearn.naive_bayes import GaussianNB
from sklearn.impute import SimpleImputer

imputer = SimpleImputer(strategy='mean')
X_train_imputed = imputer.fit_transform(X_train)


nb_model = GaussianNB()
nb_model.fit(X_train_imputed, y_train)

y_pred = nb_model.predict(X_test)
print(classification_report(y_test, y_pred, zero_division=1))

"""#Log Regression"""

from sklearn.linear_model import LogisticRegression

lg_model = LogisticRegression()
lg_model = lg_model.fit(X_train, y_train)

y_pred = lg_model.predict(X_test)
print(classification_report(y_test, y_pred, zero_division=1))

"""#Support-Vector Machine"""

from sklearn.svm import SVC

svm_model = SVC()
svm_model = svm_model.fit(X_train, y_train)

y_pred = svm_model.predict(X_test)
print(classification_report(y_test, y_pred, zero_division=1))

"""#Nueral Network"""

import tensorflow as tf

def plot_history(history):
  fig, (ax1, ax2) = plt.subplots(1, 2)
  ax1.plot(history.history['loss'], label='loss')
  ax1.plot(history.history['val_loss'], label='val_loss')
  ax1.set_xlabel('Epoch')
  ax1.set_ylabel('Binary crossentropy')
  plt.grid(True)

  ax2.plot(history.history['accuracy'], label='accuracy')
  ax2.plot(history.history['val_accuracy'], label='val_accuracy')
  ax2.set_xlabel('Epoch')
  ax2.set_ylabel('Accuracy')
  ax2.grid(True)

  plt.show()

plot_history(history)

def train_model(X_train, y_train, num_nodes, dropout_prob, lr, batch_size, epochs):
  nn_model = tf.keras.Sequential([
      tf.keras.layers.Dense(num_nodes, activation='relu', input_shape=(10,)),
      tf.keras.layers.Dropout(dropout_prob),
      tf.keras.layers.Dense(num_nodes, activation='relu'),
      tf.keras.layers.Dropout(dropout_prob),
      tf.keras.layers.Dense(1, activation='sigmoid')
  ])

  nn_model.compile(optimizer=tf.keras.optimizers.Adam(0.001), loss='binary_crossentropy',
                  metrics=['accuracy'])
  history = nn_model.fit(
    X_train, y_train, epochs=100, batch_size=32, validation_split=0.2, verbose=0
  )

  return nn_model, history

least_val_loss = float('inf')
least_loss_model = None
epochs = 100
for num_nodes in [16, 32, 64]:
  for dropout_prob in [0, 0.2]:
    for lr in [0.01, 0.005, 0.001]:
      for batch_size in [32, 64, 128]:
        print(f"{num_nodes} nodes, dropout {dropout_prob}, lr{lr}, batch_size {batch_size}")
        model, history = train_model(X_train, y_train, num_nodes, dropout_prob, lr, batch_size, epochs)
        plot_history(history)


        val_loss, val_accuracy = model.evaluate(X_valid, y_valid)

        if val_loss < least_val_loss:
          least_val_loss = val_loss
          least_loss_model = model

y_pred = least_loss_model.predict(X_test)
y_pred = (y_pred > 0.5).astype(int).reshape(-1,)

print(classification_report(y_test, y_pred, zero_division=1))